package com.mycompany.drawing;

/**
 *
 * @author ELTAYEB
 */


import java.awt.Graphics;
import java.awt.Point;
//import java.awt.Polygon;
//import java.awt.geom.*;
import java.util.ArrayList;
import java.util.List;


public class Draweng  {
    static Shape arr[]=new Shape[600];
   static private List<Line> linecontainer=new ArrayList<Line>() ;
    static private List<Circle> circcontainer=new ArrayList<>();
    static private List<Elipse> Elipsecontainer=new ArrayList<>();
    static private List<Rect> containRectangle=new ArrayList<>();
    static private List<Tria> containertrainglr=new  ArrayList<>();
   static private List<square> containsquare=new ArrayList<>();
    static int counter=0;
    public int area(int x1, int y1, int x2, int y2, int x3, int y3) 
    { 
       return Math.abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2); 
    } 
    public boolean isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y) 
    {    
       int A = area (x1, y1, x2, y2, x3, y3); 
       int A1 = area (x, y, x2, y2, x3, y3);  
       int A2 = area (x1, y1, x, y, x3, y3);   
       int A3 = area (x1, y1, x2, y2, x, y); 
       return (Math.abs(A- (A1 + A2 + A3))<0.001); 
    }
    
    public void addShape(Shape shape){
        arr[counter]=shape;
        counter++;
    }
    public void addline(Line l) {
		linecontainer.add(l);
	}
    public void addcir(Circle l) {
    	circcontainer.add(l);
	}
    public void addellipse(Elipse l) {
    	Elipsecontainer.add(l);
	}
    public void addrect(Rect l) {
    	containRectangle.add(l);
	}
    public void addtriangle(Tria l) {
    	containertrainglr.add(l);
	}
    public void addsquare(square l) {
    	containsquare.add(l);
	}
    public List<Line> getlines() {
    	return linecontainer;
    }
    public List<Circle> getcircles() {
    	return circcontainer;
    }
    public List<Elipse> getellipse() {
    	return Elipsecontainer;
    }
    public List<Tria> gettriangle() {
    	return containertrainglr;
    }
    public List<square> getsquare() {
    	return containsquare;
    }
    public List<Rect> getrectangle() {
    	return containRectangle;
    }
    public void setline(List<Line> l) {
		linecontainer.clear();
		linecontainer.addAll(l);
	}
    public void setcir(List<Circle> l) {
    	circcontainer.clear();
    	circcontainer.addAll(l);
	}
    public void setellipse(List<Elipse> l) {
    	Elipsecontainer.clear();
    	Elipsecontainer.addAll(l);
	}
    public void setrect(List<Rect> l) {
    	containRectangle.clear();
    	containRectangle.addAll(l);
	}
    public void settriangle(List<Tria> l) {
    	containertrainglr.clear();
    	containertrainglr.addAll(l);
	}
    public void setsquare(List<square> l) {
    	containsquare.clear();
    	containsquare.addAll(l);
	}
     public void removeShape(Shape shape){
         for(int i=0;i<counter;i++){
             if(arr[i]==shape){
                 for(int j=i;j<counter;j++){
                     arr[j]=arr[j+1];
                 }
                 break;
             }
             counter--;
         }
     }
     public Shape []getShapes()
     {
         return arr;
    
     }
     public void undo() {
    	 
     }
     public void redo() {
    	 
     }
     public void refresh(Graphics canvas) {
    	 Line ob=new Line();
    	 for(int i=0;i<linecontainer.size();i++)
    	    {
    	        Point p1=new Point();
    	        Point p2=new Point();
    	        p1=linecontainer.get(i).getp1();
    	        p2=linecontainer.get(i).getp2();
    	       /* p1.x=(int)linecontainer.get(i).getX1();
    	        p1.y=(int)linecontainer.get(i).getY1();
    	        p2.x=(int)linecontainer.get(i).getX2();
    	        p2.y=(int)linecontainer.get(i).getY2();*/
    	        ob.setp1(p1);ob.setp2(p2);
    	        //g2.drawLine((int)linecontainer.get(i).getX1(),(int)linecontainer.get(i).getY1(),(int)linecontainer.get(i).getX2(),(int)linecontainer.get(i).getY2());
    	        ob.draw(canvas);
    	    }
    	 Circle ob1=new Circle();
    	    for(int i=0;i<circcontainer.size();i++)
    	    {
    	        //g2.drawOval((int)circcontainer.get(i).getX(),(int)circcontainer.get(i).getY(),(int)circcontainer.get(i).getWidth(),(int)circcontainer.get(i).getWidth());
    	    	Point position=new Point();
    	    	position=circcontainer.get(i).getPosition();
    	    	/*position.x=(int)circcontainer.get(i).getX();
    	    	position.x=(int)circcontainer.get(i).getY();*/
    	    	ob1.setradius(circcontainer.get(i).getradius());
    	    	ob1.setPosition(position);
    	    	ob1.draw(canvas);
    	    	
    	    }
    	    Rect ob2=new Rect();
    	    for(int i=0;i<containRectangle.size() ;i++)
    	    {
    	    	//Point p=new Point();
    	    	//p.x=(int)containRectangle.get(i).getX();
    	    	//p.y=(int)containRectangle.get(i).getY();
    	    	ob2.setLen(containRectangle.get(i).getLen());
    	    	ob2.setwid(containRectangle.get(i).getwid());
    	    	ob2.setPosition(containRectangle.get(i).getPosition());
    	    	ob2.draw(canvas);
    	        //g2.drawRect((int)containRectangle.get(i).getX(),(int)containRectangle.get(i).getY(), (int)containRectangle.get(i).getWidth(), (int)containRectangle.get(i).getHeight());
    	    }
    	    Elipse ob3=new Elipse();
    	    for(int i=0;i<Elipsecontainer.size();i++)
    	    {
    	    	//Point p=new Point();
    	    	//p.x=(int)Elipsecontainer.get(i).getX();
    	    	//p.y=(int)Elipsecontainer.get(i).getY();
    	    	ob3.setPosition(Elipsecontainer.get(i).getPosition());
    	    	ob3.setradius1(Elipsecontainer.get(i).getradius1());
    	    	ob3.setradius2(Elipsecontainer.get(i).getradius2());
    	    	ob3.draw(canvas);
    	        //g2.drawOval((int)Elipsecontainer.get(i).getX(),(int)Elipsecontainer.get(i).getY(),(int)Elipsecontainer.get(i).getWidth(),(int)Elipsecontainer.get(i).getHeight());
    	    }
    	    Tria ob4=new Tria();
    	    for(int i=0;i<containertrainglr.size();i++)
    	    {
    	    	//int arr1[]=new int[3];
    	    	//int arr2[]=new int[3];
    	    	//arr1=containertrainglr.get(i).xpoints;
    	    	//arr2=containertrainglr.get(i).ypoints;
    	    	ob4.setx(containertrainglr.get(i).getx());
    	    	ob4.sety(containertrainglr.get(i).gety());
    	    	ob4.draw(canvas);
    	       // g2.drawPolygon(containertrainglr.get(i).xpoints,containertrainglr.get(i).ypoints, 3);
    	    }
    	    square ob5=new square();
    	    for(int i=0;i<containsquare.size();i++)
    	    {
    	    	//Point p=new Point();
    	    	//p.x=(int)containsquare.get(i).getX();
    	    	//p.y=(int)containsquare.get(i).getY();
    	    	ob5.setPosition(containsquare.get(i).getPosition());
    	    	ob5.setLen(containsquare.get(i).getLen());
    	    	ob5.draw(canvas);
    	        //g2.drawRect((int)containsquare.get(i).getX(),(int)containsquare.get(i).getY(),(int)containsquare.get(i).getHeight(),(int)containsquare.get(i).getHeight());
    	    }
     }
}

